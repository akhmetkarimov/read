"""
Django settings for root project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cdluwh-vpvx)=6!pfkv)_br9o$d%t%$r02)od&&wqtwaz_@i7$'
# SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'books',
    'universities',
    'users.apps.UsersConfig',
    'mptt',
    'django_filters',
    'import_export',
    'rest_framework_sso'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
]

IMPORT_EXPORT_USE_TRANSACTIONS = True

ALLOWED_HOSTS = [
    '*',
    '37.18.30.124',
    '212.154.154.222',
    'read.kz',
    'localhost',
    '37.18.30.124:4300',
    'localhost:4300',
    'admin.read.kz',
    'http://read.kz',
    'https://univerapi.kaznu.kz',
    'univerapi.kaznu.kz'
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'root.urls'

CORS_ORIGIN_WHITELIST = [
    'https://google.com',
    'http://read.kz',
    'http://www.read.kz',
    'https://read.kz',
    'https://www.read.kz',
    'http://admin.read.kz',
    'https://admin.read.kz',
    'https://admin.read.kz',
    'http://admin.read.kz',
    'https://univerapi.kaznu.kz',
]

CSRF_TRUSTED_ORIGINS = [
    'admin.read.kz',
    'http://read.kz/',
    'https://read.kz/',
    'http://localhost',
    'https://admin.read.kz',
    'http://admin.read.kz',
    'https://univerapi.kaznu.kz',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_postgrespool',
        'NAME': 'qazaq_university',
        "USER": 'qazaq_university',
        "PASSWORD": 'qazaq_university',
        "HOST": 'localhost',
        "PORT": 5432,
        "CONN_MAX_AGE": 0
    }
}

DATABASE_POOL_ARGS = {
    'max_overflow': 10,
    'pool_size': 5,
    'recycle': 300
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images) and Media files Settings
# https://docs.djangoproject.com/en/2.2/howto/static-files/


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# REST Framework Settings

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_sso.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
}


# Logging Settings

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}


# Email Settings
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'magkaznu.shop@gmail.com'
EMAIL_HOST_PASSWORD = 'dxveyyycukvyvsku'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


# Additional Settings

APPEND_SLASH = False
AUTH_USER_MODEL = 'users.CustomUser'


# Rest framework sso Settings

REST_FRAMEWORK_SSO = {
    'CREATE_SESSION_PAYLOAD': 'rest_framework_sso.utils.create_session_payload',
    'CREATE_AUTHORIZATION_PAYLOAD': 'rest_framework_sso.utils.create_authorization_payload',
    'ENCODE_JWT_TOKEN': 'rest_framework_sso.utils.encode_jwt_token',
    'DECODE_JWT_TOKEN': 'rest_framework_sso.utils.decode_jwt_token',
    'AUTHENTICATE_PAYLOAD': 'rest_framework_sso.utils.authenticate_payload',

    'IDENTITY': 'user',
    'SESSION_AUDIENCE': ['user'],
    'AUTHORIZATION_AUDIENCE': ['user'],
    'ACCEPTED_ISSUERS': ['user'],
    'KEY_STORE_ROOT': 'keys',
    'PUBLIC_KEYS': {
        'user': ['user_key.pem'],  # both private/public key in the same file
    },
    'PRIVATE_KEYS': {
        'user': ['user_key.pem'],  # both private/public key in the same file
    },
    'AUTHENTICATE_HEADER': 'Bearer',
    'AUTHORIZATION_EXPIRATION': timedelta(seconds=10),

}


# Number of POST/GET requests
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000
